name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the release'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.13.0'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache pnpm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pnpm-store
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install
      
    - name: Build frontend
      run: pnpm run build
      
    - name: Build with Maven
      run: mvn clean install -DskipTests
      
    - name: Get project version
      id: project-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Project version: $VERSION"
        
    - name: Find JAR file
      id: find-jar
      run: |
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        if [ -z "$JAR_FILE" ]; then
          echo "No JAR file found in target directory"
          exit 1
        fi
        echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
        echo "JAR file: $JAR_FILE"
        
    - name: Get tag name
      id: tag-name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create release notes
        cat > release_notes.md << 'EOF'
        ## Keycloak Account Theme Release ${{ steps.tag-name.outputs.tag }}
        
        ### Installation
        1. Download the `khode-account-${{ steps.project-version.outputs.version }}.jar` file
        2. Copy it to your Keycloak server's `providers` directory
        3. Restart your Keycloak server
        4. The custom account theme will be available in your realm settings
        
        ### Changes
        - Built from commit: ${{ github.sha }}
        - Project version: ${{ steps.project-version.outputs.version }}
        EOF
        
        # Check if release already exists
        if gh release view ${{ steps.tag-name.outputs.tag }} >/dev/null 2>&1; then
          echo "Release ${{ steps.tag-name.outputs.tag }} already exists, updating it..."
          
          # Update release notes
          gh release edit ${{ steps.tag-name.outputs.tag }} --notes-file release_notes.md
          
          # Remove existing JAR assets (if any)
          gh release view ${{ steps.tag-name.outputs.tag }} --json assets --jq '.assets[].name' | grep '\.jar$' | while read asset; do
            echo "Removing existing asset: $asset"
            gh release delete-asset ${{ steps.tag-name.outputs.tag }} "$asset" --yes || true
          done
          
          # Upload new JAR asset
          gh release upload ${{ steps.tag-name.outputs.tag }} \
            ${{ steps.find-jar.outputs.jar-file }}#khode-account-${{ steps.project-version.outputs.version }}.jar
        else
          echo "Creating new release ${{ steps.tag-name.outputs.tag }}..."
          # Create release with GitHub CLI
          gh release create ${{ steps.tag-name.outputs.tag }} \
            --title "Release ${{ steps.tag-name.outputs.tag }}" \
            --notes-file release_notes.md \
            ${{ steps.find-jar.outputs.jar-file }}#khode-account-${{ steps.project-version.outputs.version }}.jar
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          target/*.jar
          dist/
        retention-days: 30
