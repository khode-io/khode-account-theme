/** @type {import('tailwindcss').Config} */
export default {
    content: [
        "./src/**/*.{js,ts,jsx,tsx}",
        "./maven-resources/**/*.{html,ftl}",
    ],
    theme: {
        extend: {
            colors: {
                // Theme colors using CSS custom properties
                primary: {
                    50: 'rgb(var(--color-primary-50) / <alpha-value>)',
                    100: 'rgb(var(--color-primary-100) / <alpha-value>)',
                    200: 'rgb(var(--color-primary-200) / <alpha-value>)',
                    300: 'rgb(var(--color-primary-300) / <alpha-value>)',
                    400: 'rgb(var(--color-primary-400) / <alpha-value>)',
                    500: 'rgb(var(--color-primary-500) / <alpha-value>)',
                    600: 'rgb(var(--color-primary-600) / <alpha-value>)',
                    700: 'rgb(var(--color-primary-700) / <alpha-value>)',
                    800: 'rgb(var(--color-primary-800) / <alpha-value>)',
                    900: 'rgb(var(--color-primary-900) / <alpha-value>)',
                    950: 'rgb(var(--color-primary-950) / <alpha-value>)',
                },
                secondary: {
                    50: 'rgb(var(--color-secondary-50) / <alpha-value>)',
                    100: 'rgb(var(--color-secondary-100) / <alpha-value>)',
                    200: 'rgb(var(--color-secondary-200) / <alpha-value>)',
                    300: 'rgb(var(--color-secondary-300) / <alpha-value>)',
                    400: 'rgb(var(--color-secondary-400) / <alpha-value>)',
                    500: 'rgb(var(--color-secondary-500) / <alpha-value>)',
                    600: 'rgb(var(--color-secondary-600) / <alpha-value>)',
                    700: 'rgb(var(--color-secondary-700) / <alpha-value>)',
                    800: 'rgb(var(--color-secondary-800) / <alpha-value>)',
                    900: 'rgb(var(--color-secondary-900) / <alpha-value>)',
                    950: 'rgb(var(--color-secondary-950) / <alpha-value>)',
                },
                success: {
                    50: 'rgb(var(--color-success-50) / <alpha-value>)',
                    100: 'rgb(var(--color-success-100) / <alpha-value>)',
                    200: 'rgb(var(--color-success-200) / <alpha-value>)',
                    300: 'rgb(var(--color-success-300) / <alpha-value>)',
                    400: 'rgb(var(--color-success-400) / <alpha-value>)',
                    500: 'rgb(var(--color-success-500) / <alpha-value>)',
                    600: 'rgb(var(--color-success-600) / <alpha-value>)',
                    700: 'rgb(var(--color-success-700) / <alpha-value>)',
                    800: 'rgb(var(--color-success-800) / <alpha-value>)',
                    900: 'rgb(var(--color-success-900) / <alpha-value>)',
                    950: 'rgb(var(--color-success-950) / <alpha-value>)',
                },
                warning: {
                    50: 'rgb(var(--color-warning-50) / <alpha-value>)',
                    100: 'rgb(var(--color-warning-100) / <alpha-value>)',
                    200: 'rgb(var(--color-warning-200) / <alpha-value>)',
                    300: 'rgb(var(--color-warning-300) / <alpha-value>)',
                    400: 'rgb(var(--color-warning-400) / <alpha-value>)',
                    500: 'rgb(var(--color-warning-500) / <alpha-value>)',
                    600: 'rgb(var(--color-warning-600) / <alpha-value>)',
                    700: 'rgb(var(--color-warning-700) / <alpha-value>)',
                    800: 'rgb(var(--color-warning-800) / <alpha-value>)',
                    900: 'rgb(var(--color-warning-900) / <alpha-value>)',
                    950: 'rgb(var(--color-warning-950) / <alpha-value>)',
                },
                error: {
                    50: 'rgb(var(--color-error-50) / <alpha-value>)',
                    100: 'rgb(var(--color-error-100) / <alpha-value>)',
                    200: 'rgb(var(--color-error-200) / <alpha-value>)',
                    300: 'rgb(var(--color-error-300) / <alpha-value>)',
                    400: 'rgb(var(--color-error-400) / <alpha-value>)',
                    500: 'rgb(var(--color-error-500) / <alpha-value>)',
                    600: 'rgb(var(--color-error-600) / <alpha-value>)',
                    700: 'rgb(var(--color-error-700) / <alpha-value>)',
                    800: 'rgb(var(--color-error-800) / <alpha-value>)',
                    900: 'rgb(var(--color-error-900) / <alpha-value>)',
                    950: 'rgb(var(--color-error-950) / <alpha-value>)',
                },
                // Semantic color mappings
                background: 'rgb(var(--color-background) / <alpha-value>)',
                surface: {
                    DEFAULT: 'rgb(var(--color-surface) / <alpha-value>)',
                    secondary: 'rgb(var(--color-surface-secondary) / <alpha-value>)',
                    tertiary: 'rgb(var(--color-surface-tertiary) / <alpha-value>)',
                },
                text: {
                    primary: 'rgb(var(--color-text-primary) / <alpha-value>)',
                    secondary: 'rgb(var(--color-text-secondary) / <alpha-value>)',
                    tertiary: 'rgb(var(--color-text-tertiary) / <alpha-value>)',
                    inverse: 'rgb(var(--color-text-inverse) / <alpha-value>)',
                },
                border: {
                    primary: 'rgb(var(--color-border-primary) / <alpha-value>)',
                    secondary: 'rgb(var(--color-border-secondary) / <alpha-value>)',
                    focus: 'rgb(var(--color-border-focus) / <alpha-value>)',
                },
                accent: {
                    primary: 'rgb(var(--color-accent-primary) / <alpha-value>)',
                    'primary-hover': 'rgb(var(--color-accent-primary-hover) / <alpha-value>)',
                    secondary: 'rgb(var(--color-accent-secondary) / <alpha-value>)',
                    'secondary-hover': 'rgb(var(--color-accent-secondary-hover) / <alpha-value>)',
                },
                hover: {
                    light: 'rgb(var(--color-hover-light) / <alpha-value>)',
                    medium: 'rgb(var(--color-hover-medium) / <alpha-value>)',
                },
                active: {
                    light: 'rgb(var(--color-active-light) / <alpha-value>)',
                    medium: 'rgb(var(--color-active-medium) / <alpha-value>)',
                },
                status: {
                    success: 'rgb(var(--color-status-success) / <alpha-value>)',
                    warning: 'rgb(var(--color-status-warning) / <alpha-value>)',
                    error: 'rgb(var(--color-status-error) / <alpha-value>)',
                    info: 'rgb(var(--color-status-info) / <alpha-value>)',
                },
            },
        },
    },
    plugins: [
        require('tailwind-scrollbar')({ nocompatible: true }),
    ],
}
